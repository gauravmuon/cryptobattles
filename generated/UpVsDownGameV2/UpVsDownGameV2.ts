// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class GameStarted extends ethereum.Event {
  get params(): GameStarted__Params {
    return new GameStarted__Params(this);
  }
}

export class GameStarted__Params {
  _event: GameStarted;

  constructor(event: GameStarted) {
    this._event = event;
  }
}

export class GameStopped extends ethereum.Event {
  get params(): GameStopped__Params {
    return new GameStopped__Params(this);
  }
}

export class GameStopped__Params {
  _event: GameStopped;

  constructor(event: GameStopped) {
    this._event = event;
  }

  get reason(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RoundDistributed extends ethereum.Event {
  get params(): RoundDistributed__Params {
    return new RoundDistributed__Params(this);
  }
}

export class RoundDistributed__Params {
  _event: RoundDistributed;

  constructor(event: RoundDistributed) {
    this._event = event;
  }

  get poolId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get totalWinners(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get from(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get to(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class RoundEnded extends ethereum.Event {
  get params(): RoundEnded__Params {
    return new RoundEnded__Params(this);
  }
}

export class RoundEnded__Params {
  _event: RoundEnded;

  constructor(event: RoundEnded) {
    this._event = event;
  }

  get poolId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get startPrice(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get endPrice(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get indexedPoolId(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }
}

export class RoundStarted extends ethereum.Event {
  get params(): RoundStarted__Params {
    return new RoundStarted__Params(this);
  }
}

export class RoundStarted__Params {
  _event: RoundStarted;

  constructor(event: RoundStarted) {
    this._event = event;
  }

  get poolId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get price(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get minTradeAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get maxTradeAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get poolTradesLimit(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get indexedPoolId(): Bytes {
    return this._event.parameters[6].value.toBytes();
  }
}

export class TradePlaced extends ethereum.Event {
  get params(): TradePlaced__Params {
    return new TradePlaced__Params(this);
  }
}

export class TradePlaced__Params {
  _event: TradePlaced;

  constructor(event: TradePlaced) {
    this._event = event;
  }

  get poolId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get prediction(): string {
    return this._event.parameters[3].value.toString();
  }

  get newTotal(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get indexedPoolId(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }

  get indexedSender(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get avatarUrl(): string {
    return this._event.parameters[7].value.toString();
  }

  get countryCode(): string {
    return this._event.parameters[8].value.toString();
  }

  get roundStartTime(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }

  get whiteLabelId(): string {
    return this._event.parameters[10].value.toString();
  }
}

export class TradeReturned extends ethereum.Event {
  get params(): TradeReturned__Params {
    return new TradeReturned__Params(this);
  }
}

export class TradeReturned__Params {
  _event: TradeReturned;

  constructor(event: TradeReturned) {
    this._event = event;
  }

  get poolId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get whiteLabelId(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class TradeWinningsSent extends ethereum.Event {
  get params(): TradeWinningsSent__Params {
    return new TradeWinningsSent__Params(this);
  }
}

export class TradeWinningsSent__Params {
  _event: TradeWinningsSent;

  constructor(event: TradeWinningsSent) {
    this._event = event;
  }

  get poolId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tradeAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get winningsAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get indexedSender(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get whiteLabelId(): string {
    return this._event.parameters[5].value.toString();
  }
}

export class UpVsDownGameV2__poolsResultUpBetGroupStruct extends ethereum.Tuple {
  get bets(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get addresses(): Array<Address> {
    return this[1].toAddressArray();
  }

  get avatars(): Array<string> {
    return this[2].toStringArray();
  }

  get countries(): Array<string> {
    return this[3].toStringArray();
  }

  get whiteLabelIds(): Array<string> {
    return this[4].toStringArray();
  }

  get total(): BigInt {
    return this[5].toBigInt();
  }

  get distributedCount(): BigInt {
    return this[6].toBigInt();
  }

  get totalDistributed(): BigInt {
    return this[7].toBigInt();
  }
}

export class UpVsDownGameV2__poolsResultDownBetGroupStruct extends ethereum.Tuple {
  get bets(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get addresses(): Array<Address> {
    return this[1].toAddressArray();
  }

  get avatars(): Array<string> {
    return this[2].toStringArray();
  }

  get countries(): Array<string> {
    return this[3].toStringArray();
  }

  get whiteLabelIds(): Array<string> {
    return this[4].toStringArray();
  }

  get total(): BigInt {
    return this[5].toBigInt();
  }

  get distributedCount(): BigInt {
    return this[6].toBigInt();
  }

  get totalDistributed(): BigInt {
    return this[7].toBigInt();
  }
}

export class UpVsDownGameV2__poolsResult {
  value0: boolean;
  value1: i32;
  value2: i32;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: UpVsDownGameV2__poolsResultUpBetGroupStruct;
  value7: UpVsDownGameV2__poolsResultDownBetGroupStruct;
  value8: BigInt;
  value9: BigInt;
  value10: BigInt;

  constructor(
    value0: boolean,
    value1: i32,
    value2: i32,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: UpVsDownGameV2__poolsResultUpBetGroupStruct,
    value7: UpVsDownGameV2__poolsResultDownBetGroupStruct,
    value8: BigInt,
    value9: BigInt,
    value10: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromI32(this.value1));
    map.set("value2", ethereum.Value.fromI32(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromTuple(this.value6));
    map.set("value7", ethereum.Value.fromTuple(this.value7));
    map.set("value8", ethereum.Value.fromSignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    return map;
  }

  getCreated(): boolean {
    return this.value0;
  }

  getStartPrice(): i32 {
    return this.value1;
  }

  getEndPrice(): i32 {
    return this.value2;
  }

  getMinBetAmount(): BigInt {
    return this.value3;
  }

  getMaxBetAmount(): BigInt {
    return this.value4;
  }

  getPoolBetsLimit(): BigInt {
    return this.value5;
  }

  getUpBetGroup(): UpVsDownGameV2__poolsResultUpBetGroupStruct {
    return this.value6;
  }

  getDownBetGroup(): UpVsDownGameV2__poolsResultDownBetGroupStruct {
    return this.value7;
  }

  getRoundStartTime(): BigInt {
    return this.value8;
  }

  getTradesStartTimeMS(): BigInt {
    return this.value9;
  }

  getTradesEndTimeMS(): BigInt {
    return this.value10;
  }
}

export class UpVsDownGameV2 extends ethereum.SmartContract {
  static bind(address: Address): UpVsDownGameV2 {
    return new UpVsDownGameV2("UpVsDownGameV2", address);
  }

  feeAddress(): Address {
    let result = super.call("feeAddress", "feeAddress():(address)", []);

    return result[0].toAddress();
  }

  try_feeAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeAddress", "feeAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  feePercentage(): i32 {
    let result = super.call("feePercentage", "feePercentage():(uint8)", []);

    return result[0].toI32();
  }

  try_feePercentage(): ethereum.CallResult<i32> {
    let result = super.tryCall("feePercentage", "feePercentage():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  gameController(): Address {
    let result = super.call("gameController", "gameController():(address)", []);

    return result[0].toAddress();
  }

  try_gameController(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "gameController",
      "gameController():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hasPendingDistributions(poolId: Bytes): boolean {
    let result = super.call(
      "hasPendingDistributions",
      "hasPendingDistributions(bytes):(bool)",
      [ethereum.Value.fromBytes(poolId)]
    );

    return result[0].toBoolean();
  }

  try_hasPendingDistributions(poolId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasPendingDistributions",
      "hasPendingDistributions(bytes):(bool)",
      [ethereum.Value.fromBytes(poolId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPoolOpen(poolId: Bytes): boolean {
    let result = super.call("isPoolOpen", "isPoolOpen(bytes):(bool)", [
      ethereum.Value.fromBytes(poolId)
    ]);

    return result[0].toBoolean();
  }

  try_isPoolOpen(poolId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPoolOpen", "isPoolOpen(bytes):(bool)", [
      ethereum.Value.fromBytes(poolId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isRunning(): boolean {
    let result = super.call("isRunning", "isRunning():(bool)", []);

    return result[0].toBoolean();
  }

  try_isRunning(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isRunning", "isRunning():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  notRunningReason(): Bytes {
    let result = super.call(
      "notRunningReason",
      "notRunningReason():(bytes)",
      []
    );

    return result[0].toBytes();
  }

  try_notRunningReason(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "notRunningReason",
      "notRunningReason():(bytes)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pools(param0: Bytes): UpVsDownGameV2__poolsResult {
    let result = super.call(
      "pools",
      "pools(bytes):(bool,int32,int32,uint256,uint256,uint256,(uint256[],address[],string[],string[],string[],uint256,uint256,uint256),(uint256[],address[],string[],string[],string[],uint256,uint256,uint256),int64,uint256,uint256)",
      [ethereum.Value.fromBytes(param0)]
    );

    return new UpVsDownGameV2__poolsResult(
      result[0].toBoolean(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      changetype<UpVsDownGameV2__poolsResultUpBetGroupStruct>(
        result[6].toTuple()
      ),
      changetype<UpVsDownGameV2__poolsResultDownBetGroupStruct>(
        result[7].toTuple()
      ),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBigInt()
    );
  }

  try_pools(param0: Bytes): ethereum.CallResult<UpVsDownGameV2__poolsResult> {
    let result = super.tryCall(
      "pools",
      "pools(bytes):(bool,int32,int32,uint256,uint256,uint256,(uint256[],address[],string[],string[],string[],uint256,uint256,uint256),(uint256[],address[],string[],string[],string[],uint256,uint256,uint256),int64,uint256,uint256)",
      [ethereum.Value.fromBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new UpVsDownGameV2__poolsResult(
        value[0].toBoolean(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        changetype<UpVsDownGameV2__poolsResultUpBetGroupStruct>(
          value[6].toTuple()
        ),
        changetype<UpVsDownGameV2__poolsResultDownBetGroupStruct>(
          value[7].toTuple()
        ),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get newGameController(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ChangeGameControllerAddressCall extends ethereum.Call {
  get inputs(): ChangeGameControllerAddressCall__Inputs {
    return new ChangeGameControllerAddressCall__Inputs(this);
  }

  get outputs(): ChangeGameControllerAddressCall__Outputs {
    return new ChangeGameControllerAddressCall__Outputs(this);
  }
}

export class ChangeGameControllerAddressCall__Inputs {
  _call: ChangeGameControllerAddressCall;

  constructor(call: ChangeGameControllerAddressCall) {
    this._call = call;
  }

  get newGameController(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeGameControllerAddressCall__Outputs {
  _call: ChangeGameControllerAddressCall;

  constructor(call: ChangeGameControllerAddressCall) {
    this._call = call;
  }
}

export class ChangeGameFeeAddressCall extends ethereum.Call {
  get inputs(): ChangeGameFeeAddressCall__Inputs {
    return new ChangeGameFeeAddressCall__Inputs(this);
  }

  get outputs(): ChangeGameFeeAddressCall__Outputs {
    return new ChangeGameFeeAddressCall__Outputs(this);
  }
}

export class ChangeGameFeeAddressCall__Inputs {
  _call: ChangeGameFeeAddressCall;

  constructor(call: ChangeGameFeeAddressCall) {
    this._call = call;
  }

  get newFeeAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeGameFeeAddressCall__Outputs {
  _call: ChangeGameFeeAddressCall;

  constructor(call: ChangeGameFeeAddressCall) {
    this._call = call;
  }
}

export class ChangeGameFeePercentageCall extends ethereum.Call {
  get inputs(): ChangeGameFeePercentageCall__Inputs {
    return new ChangeGameFeePercentageCall__Inputs(this);
  }

  get outputs(): ChangeGameFeePercentageCall__Outputs {
    return new ChangeGameFeePercentageCall__Outputs(this);
  }
}

export class ChangeGameFeePercentageCall__Inputs {
  _call: ChangeGameFeePercentageCall;

  constructor(call: ChangeGameFeePercentageCall) {
    this._call = call;
  }

  get newFeePercentage(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class ChangeGameFeePercentageCall__Outputs {
  _call: ChangeGameFeePercentageCall;

  constructor(call: ChangeGameFeePercentageCall) {
    this._call = call;
  }
}

export class CreatePoolCall extends ethereum.Call {
  get inputs(): CreatePoolCall__Inputs {
    return new CreatePoolCall__Inputs(this);
  }

  get outputs(): CreatePoolCall__Outputs {
    return new CreatePoolCall__Outputs(this);
  }
}

export class CreatePoolCall__Inputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get poolId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get minBetAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get maxBetAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get poolBetsLimit(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CreatePoolCall__Outputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }
}

export class DistributeCall extends ethereum.Call {
  get inputs(): DistributeCall__Inputs {
    return new DistributeCall__Inputs(this);
  }

  get outputs(): DistributeCall__Outputs {
    return new DistributeCall__Outputs(this);
  }
}

export class DistributeCall__Inputs {
  _call: DistributeCall;

  constructor(call: DistributeCall) {
    this._call = call;
  }

  get poolId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get batchSize(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get timeMS(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DistributeCall__Outputs {
  _call: DistributeCall;

  constructor(call: DistributeCall) {
    this._call = call;
  }
}

export class MakeTradeCall extends ethereum.Call {
  get inputs(): MakeTradeCall__Inputs {
    return new MakeTradeCall__Inputs(this);
  }

  get outputs(): MakeTradeCall__Outputs {
    return new MakeTradeCall__Outputs(this);
  }
}

export class MakeTradeCall__Inputs {
  _call: MakeTradeCall;

  constructor(call: MakeTradeCall) {
    this._call = call;
  }

  get userTrade(): MakeTradeCallUserTradeStruct {
    return changetype<MakeTradeCallUserTradeStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class MakeTradeCall__Outputs {
  _call: MakeTradeCall;

  constructor(call: MakeTradeCall) {
    this._call = call;
  }
}

export class MakeTradeCallUserTradeStruct extends ethereum.Tuple {
  get poolId(): Bytes {
    return this[0].toBytes();
  }

  get avatarUrl(): string {
    return this[1].toString();
  }

  get countryCode(): string {
    return this[2].toString();
  }

  get upOrDown(): boolean {
    return this[3].toBoolean();
  }

  get whiteLabelId(): string {
    return this[4].toString();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class StartGameCall extends ethereum.Call {
  get inputs(): StartGameCall__Inputs {
    return new StartGameCall__Inputs(this);
  }

  get outputs(): StartGameCall__Outputs {
    return new StartGameCall__Outputs(this);
  }
}

export class StartGameCall__Inputs {
  _call: StartGameCall;

  constructor(call: StartGameCall) {
    this._call = call;
  }
}

export class StartGameCall__Outputs {
  _call: StartGameCall;

  constructor(call: StartGameCall) {
    this._call = call;
  }
}

export class StopGameCall extends ethereum.Call {
  get inputs(): StopGameCall__Inputs {
    return new StopGameCall__Inputs(this);
  }

  get outputs(): StopGameCall__Outputs {
    return new StopGameCall__Outputs(this);
  }
}

export class StopGameCall__Inputs {
  _call: StopGameCall;

  constructor(call: StopGameCall) {
    this._call = call;
  }

  get reason(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class StopGameCall__Outputs {
  _call: StopGameCall;

  constructor(call: StopGameCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class TriggerCall extends ethereum.Call {
  get inputs(): TriggerCall__Inputs {
    return new TriggerCall__Inputs(this);
  }

  get outputs(): TriggerCall__Outputs {
    return new TriggerCall__Outputs(this);
  }
}

export class TriggerCall__Inputs {
  _call: TriggerCall;

  constructor(call: TriggerCall) {
    this._call = call;
  }

  get poolId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get timeMS(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tradesStartTimeMS(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get tradesEndTimeMS(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get price(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get batchSize(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class TriggerCall__Outputs {
  _call: TriggerCall;

  constructor(call: TriggerCall) {
    this._call = call;
  }
}
